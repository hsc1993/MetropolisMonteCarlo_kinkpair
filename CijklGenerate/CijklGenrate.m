% Anisotropic Barnett triangle stress fields for general crystal structure
% Steve Fitzgerald July 2016

% build elastic tensor c_{ijkl} from Voigt C_{ij} (units GPa)
% distances are in lattice parameters e.g. b=[0.5 0.5 0.5] or [1 0 0]

clear();close all;clc

% here are some example structures

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% this one's for a tetragonal crystal

% C16 = 0; 

% cv = ... 
% [146 57 41 0 0 C16;
%  57 146 41 0 0 -C16;
%  41 41 64 0 0 0;
%  0 0 0 32 0 0 ;
%  0 0 0 0 32 0;
%  C16 -C16 0 0 0 68];

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% this is for anisotropic bcc Fe at 900C %25C

 %c11 = 149%232
 %c12 = 122%146
 %c44 = 99%117

% isotropic test (bcc W) % units in GPa
 c11_GPa = 523
 c12_GPa = 203
 c44_GPa = (c11_GPa - c12_GPa)/2 
%note: for Giacomo's code, 100GPa is used for the unit.
 c11 = 523
 c12 = 203
 c44 = (c11 - c12)/2
 
 %jaime_2020
 c11 = 228
 c12 = 132
 c44 = 116
 
% (c11 - c12)/2 = C', the other shear mod. C' = C44 = mu
% in iso \lambda = C12, \mu = C44

cv = ... 
[c11 c12 c12 0 0 0;
 c12 c11 c12 0 0 0;
 c12 c12 c11 0 0 0;
 0 0 0 c44 0 0 ;
 0 0 0 0 c44 0;
 0 0 0 0 0 c44];



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% this for hcp Ti (moduli from Viswanathan et al, Acta Mat 53 5101 (2005))

% c11=162.4
% c12=92
% c13=69
% c33=181
% c44=117
% c66=(c11-c12)/2
% 
% cv = ... 
% [c11 c12 c13 0 0 0;
%  c12 c11 c13 0 0 0;
%  c13 c13 c33 0 0 0;
%  0 0 0 c44 0 0 ;
%  0 0 0 0 c44 0;
%  0 0 0 0 0 c66];


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Now populate 81-component c_{ijkl} 
c = zeros(3,3,3,3);

c(1,1,1,1)=cv(1,1);
c(1,1,1,2)=cv(1,6);
c(1,1,1,3)=cv(1,5);
c(1,1,2,1)=cv(1,6);
c(1,1,2,2)=cv(1,2);
c(1,1,2,3)=cv(1,4);
c(1,1,3,1)=cv(1,5);
c(1,1,3,2)=cv(1,4);
c(1,1,3,3)=cv(1,3);

c(1,2,1,1)=cv(6,1);
c(1,2,1,2)=cv(6,6);
c(1,2,1,3)=cv(6,5);
c(1,2,2,1)=cv(6,6);
c(1,2,2,2)=cv(6,2);
c(1,2,2,3)=cv(6,4);
c(1,2,3,1)=cv(6,5);
c(1,2,3,2)=cv(6,4);
c(1,2,3,3)=cv(6,3);

c(1,3,1,1)=cv(5,1);
c(1,3,1,2)=cv(5,6);
c(1,3,1,3)=cv(5,5);
c(1,3,2,1)=cv(5,6);
c(1,3,2,2)=cv(5,2);
c(1,3,2,3)=cv(5,4);
c(1,3,3,1)=cv(5,5);
c(1,3,3,2)=cv(5,4);
c(1,3,3,3)=cv(5,3);

c(2,1,1,1)=cv(6,1);
c(2,1,1,2)=cv(6,6);
c(2,1,1,3)=cv(6,5);
c(2,1,2,1)=cv(6,6);
c(2,1,2,2)=cv(6,2);
c(2,1,2,3)=cv(6,4);
c(2,1,3,1)=cv(6,5);
c(2,1,3,2)=cv(6,4);
c(2,1,3,3)=cv(6,3);

c(2,2,1,1)=cv(2,1);
c(2,2,1,2)=cv(2,6);
c(2,2,1,3)=cv(2,5);
c(2,2,2,1)=cv(2,6);
c(2,2,2,2)=cv(2,2);
c(2,2,2,3)=cv(2,4);
c(2,2,3,1)=cv(2,5);
c(2,2,3,2)=cv(2,4);
c(2,2,3,3)=cv(2,3);

c(2,3,1,1)=cv(4,1);
c(2,3,1,2)=cv(4,6);
c(2,3,1,3)=cv(4,5);
c(2,3,2,1)=cv(4,6);
c(2,3,2,2)=cv(4,2);
c(2,3,2,3)=cv(4,4);
c(2,3,3,1)=cv(4,5);
c(2,3,3,2)=cv(4,4);
c(2,3,3,3)=cv(4,3);

c(3,1,1,1)=cv(5,1);
c(3,1,1,2)=cv(5,6);
c(3,1,1,3)=cv(5,5);
c(3,1,2,1)=cv(5,6);
c(3,1,2,2)=cv(5,2);
c(3,1,2,3)=cv(5,4);
c(3,1,3,1)=cv(5,5);
c(3,1,3,2)=cv(5,4);
c(3,1,3,3)=cv(5,3);

c(3,2,1,1)=cv(4,1);
c(3,2,1,2)=cv(4,6);
c(3,2,1,3)=cv(4,5);
c(3,2,2,1)=cv(4,6);
c(3,2,2,2)=cv(4,2);
c(3,2,2,3)=cv(4,4);
c(3,2,3,1)=cv(4,5);
c(3,2,3,2)=cv(4,4);
c(3,2,3,3)=cv(4,3);

c(3,3,1,1)=cv(3,1);
c(3,3,1,2)=cv(3,6);
c(3,3,1,3)=cv(3,5);
c(3,3,2,1)=cv(3,6);
c(3,3,2,2)=cv(3,2);
c(3,3,2,3)=cv(3,4);
c(3,3,3,1)=cv(3,5);
c(3,3,3,2)=cv(3,4);
c(3,3,3,3)=cv(3,3);



fileID = fopen('Cijkl_ext.out','w');
for i = 1:3
    for j = 1:3
        for k = 1:3
            for l = 1:3
               B = [i; j; k; l; c(i,j,k,l)];
               fprintf(fileID,'%d %2d %2d %2d %12.8e\n',B);
            end
        end
    end
end
fclose(fileID);



burgers = 2.4829;
fileID = fopen('Burgers.out','w');
fprintf(fileID,'%.8f',burgers);

fclose(fileID);






